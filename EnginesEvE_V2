import chess.engine
import chess.pgn
import io
import os
from datetime import datetime

def print_board(board):
    print('   a b c d e f g h')
    print('  ----------------')
    for i in range(8):
        print(8-i, end=' |')
        for j in range(8):
            piece = board.piece_at(chess.square(j, 7-i))
            if piece:
                print(' ' + piece.symbol(), end='')
            else:
                print(' .', end='')
        print(' |', 8-i)
    print('  ----------------')
    print('   a b c d e f g h')

def get_engines():
    engines = {
        'LC0': chess.engine.SimpleEngine.popen_uci(r"C:\\Users\\xdevi\\Downloads\\lc0-v0.30.0-windows-cpu-openblas\\lc0.exe"),
        'Stockfish': chess.engine.SimpleEngine.popen_uci(r"C:\\Users\\xdevi\\Downloads\\stockfish\\stockfish-windows-x86-64-avx2.exe"),
        'Komodo': chess.engine.SimpleEngine.popen_uci(r"C:\\Users\\xdevi\\Downloads\\komodo-14\\Windows\\komodo-14.1-64bit.exe"),
        'Human': "Human"
    }
    engines['LC0'].configure({'WeightsFile': r'C:\\Users\\xdevi\\Downloads\\lc0-v0.30.0-windows-cpu-openblas\\weights_run1_814631.lc0'})
    return engines

def instructions():
    print("\nInstructions:")
    print("1. Play a game against an engine: Choose an engine to play against and select your color. Play the game using standard chess notation.")
    print("2. Play a game between two engines: Choose two engines to play against each other. Watch the game unfold!")
    print("3. Analyze a position: Choose an engine to analyze a specific position. You can input the position as PGN or FEN.")
    print("4. Quit: Exit the program.")
    print("For multi-line PGN or FEN, you can use a text file. Simply enter the filename when prompted.")
    print("Have fun playing chess!\n")

def play_game(engine1, engine2, engine1_name, engine2_name, engine1_is_white=True):
    board = chess.Board()
    while not board.is_game_over():
        print_board(board)
        if board.turn == engine1_is_white:
            if engine1_name == "Human":
                move = input("Enter your move: ")
                board.push_san(move)
                print(f"{engine1_name} plays {move}")
            else:
                result = engine1.play(board, chess.engine.Limit(time=2.0))
                board.push(result.move)
                print(f"{engine1_name} plays {board.san(result.move)}")
        else:
            if engine2_name == "Human":
                move = input("Enter your move: ")
                board.push_san(move)
                print(f"{engine2_name} plays {move}")
            else:
                result = engine2.play(board, chess.engine.Limit(time=2.0))
                board.push(result.move)
                print(f"{engine2_name} plays {board.san(result.move)}")
    print_board(board)
    return board

def analyze_custom_position(fen):
    engines = get_engines()
    engine = engines['Stockfish'] # Using Stockfish for analysis

    board = chess.Board(fen=fen)
    print("Analyzing the custom position:")
    print_board(board)

    best_moves = {}
    for color in ['white', 'black']:
        result = engine.play(board, chess.engine.Limit(time=2.0), info=chess.engine.INFO_PV)
        best_move = str(result.move)
        best_moves[color] = best_move
        print(f"Best move for {color}: {best_move}")

    return best_moves

def analyze_position(engine_name, filename, color, play_out=False):
    engines = get_engines()
    engine = engines[engine_name]

    pgn_path = "C:\\Users\\xdevi\\Downloads\\" + filename
    if not os.path.exists(pgn_path):
        print(f"The file '{filename}' was not found in the directory: {pgn_path}")
        return

    with open(pgn_path, 'r') as f:
        pgn_or_fen = f.read()

    is_pgn = ' ' in pgn_or_fen
    if is_pgn:
        game = chess.pgn.read_game(io.StringIO(pgn_or_fen))
        board = game.end().board()
    else:
        board = chess.Board(fen=pgn_or_fen)

    result = engine.play(board, chess.engine.Limit(time=2.0))
    best_move = str(result.move)

    if play_out:
        while not board.is_game_over():
            result = engine.play(board, chess.engine.Limit(time=2.0))
            board.push(result.move)
        game = chess.pgn.Game.from_board(board)
        return {
            'best_move': best_move,
            'pgn': str(game)
        }
    else:
        return {
            'best_move': best_move,
            'pgn': None
        }

def main():
    engines = get_engines()
    while True:
        print("1. Play a game against an engine")
        print("2. Play a game between two engines")
        print("3. Analyze a position")
        print("4. Instructions")
        print("5. Quit")
        choice = input("Enter your choice: ")

        if choice == "3":
            input_method = input("Enter 'FEN' to input a custom position or 'file' to use a PGN/FEN file: ")
            if input_method.lower() == 'fen':
                fen = input("Enter the custom position in FEN format: ")
                analyze_custom_position(fen)
            else:
                engine_choice = input("Choose which engine you want to analyze the game (Stockfish/LC0/Komodo): ")
                filename = input("Enter the name of the file containing the PGN or FEN of the position: ")
                color = input("Enter the color to analyze (white/black): ")
                play_out = input("Do you want to play out the game? (yes/no): ") == "yes"
                result = analyze_position(engine_choice, filename, color, play_out)
                print("Best move:", result['best_move'])
                if result['pgn']:
                    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                    filename = f"{engine_choice}_analysis_{timestamp}.pgn"
                    with open(filename, 'w') as f:
                        f.write(result['pgn'])
                    print(f"Game PGN saved to {filename}")

        # ... (other choices)

if __name__ == "__main__":
    main()
